stat_qq_line() +
ggtitle("Q-Q Plot of Log(Price)")
# Linear model with log(price)
model.log <- lm(log.price ~ bedrooms + bathrooms + sqft_living + floors + view + condition + grade + yr_built, data = data)
# Summary of the new model
summary(model.log)
# Histogram and Q-Q plot for price
ggplot(data, aes(x = price)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.5) +
geom_density() +
ggtitle("Histogram of Price with Density")
ggplot(data, aes(sample = price)) +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q Plot of Price")
# Histogram and Q-Q plot for log(price)
data$log.price <- log(data$price)
ggplot(data, aes(x = log.price)) +
geom_histogram(aes(y = after_stat(density)), bins = 30, alpha = 0.5) +
geom_density() +
ggtitle("Histogram of Log(Price) with Density")
ggplot(data, aes(sample = price)) +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q Plot of Log(Price)")
# Linear model with log(price)
model.log <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = data)
summary(model.log)
# Same plots for model.log
plot(model.log, which = 1)
plot(model.log, which = 2)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(subset_data, aes_string(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("log(price) vs", var)) +
theme_minimal()
}
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(data, aes_string(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
}
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
}
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
}
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
}
# Adding squared terms to data
data$yr_built2 <- subset_data$yr_built^2
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
}
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
print(ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var)))
}
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
print(ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var)))
}
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
p
}
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
print(p)
}
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
plots <- list()
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplot(data, aes(x = var, y = "log_price")) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
plots[[var]] <- p
}
library(gridExtra)
do.call(grid.arrange, c(plots, ncol = 3))
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
plots <- list()
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplotdata, aes(x = .data[[var]], y = log.price)) +
# Plotting each covariate against log(price)
plots <- list()
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplot(data, aes(x = .data[[var]], y = log.price)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle(paste("log(price) vs", var))
plots[[var]] <- p
}
library(gridExtra)
do.call(grid.arrange, c(plots, ncol = 3))
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
plots <- list()
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
p <- ggplot(data, aes(x = .data[[var]], y = log.price)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var))
plots[[var]] <- p
}
library(gridExtra)
do.call(grid.arrange, c(plots, ncol = 3))
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
# Plotting each covariate against log(price)
for (var in c("bedrooms", "bathrooms", "sqft_living", "floors", "view", "condition", "grade", "yr_built")) {
print(ggplot(data, aes(x = .data[[var]], y = log.price)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
ggtitle(paste("log(price) vs", var)))
}
# Adding squared terms to data
data$yr_built2 <- data$yr_built^2
data$sqft_living2 <- data$sqft_living^2
# Fit polynomial model
model.log.poly <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = data)
summary(model.log.poly)
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
# Model from (b) on training set
model.b <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = train.set)
# Model from (c) on training set
model.c <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = train.set)
# Predictions
pred.b <- predict(model.b, newdata = test.set)
pred.c <- predict(model.c, newdata = test.set)
# MSE
mse.b <- mean((pred.b - test.set$log_price)^2)
mse.c <- mean((pred.c - test.set$log_price)^2)
paste("MSE model (b):", mse.b)
paste("MSE model (c):", mse.c)
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
# Model from (b) on training set
model.b <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = train.set)
# Model from (c) on training set
model.c <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = train.set)
# Predictions
pred.b <- predict(model.b, newdata = test.set)
pred.c <- predict(model.c, newdata = test.set)
# MSE
mse.b <- mean((pred.b - test.set$log.price)^2)
mse.c <- mean((pred.c - test.set$log.price)^2)
paste("MSE model (b):", mse.b)
paste("MSE model (c):", mse.c)
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
# Model from (b) on training set
model.b <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = train.set)
# Model from (c) on training set
model.c <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = train.set)
# Predictions
pred.b <- predict(model.b, newdata = test.set)
pred.c <- predict(model.c, newdata = test.set)
# MSE
mse.b <- mean((pred.b - test.set$log.price)^2)
mse.c <- mean((pred.c - test.set$log.price)^2)
paste("MSE model (b):", mse.b)
paste("MSE model (c):", mse.c)
# New model with an interaction term
# between grade and sqft_living
model.extended <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2 +
grade:sqft_living,
data = train_set)
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
# Model from (b) on training set
model.b <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = train.set)
# Model from (c) on training set
model.c <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = train.set)
# Predictions
pred.b <- predict(model.b, newdata = test.set)
pred.c <- predict(model.c, newdata = test.set)
# MSE
mse.b <- mean((pred.b - test.set$log.price)^2)
mse.c <- mean((pred.c - test.set$log.price)^2)
paste("MSE model (b):", mse.b)
paste("MSE model (c):", mse.c)
# New model with an interaction term
# between grade and sqft_living
model.extended <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2 +
grade:sqft_living,
data = train.set)
pred.extended <- predict(model.extended, newdata = test.set)
mse.extended <- mean((pred.extended - test.set$log.price)^2)
paste("MSE extended model:", mse.extended)
set.seed(1122)
# Set training and test set
train.indices <- sample(1:nrow(data), 10806)
train.set <- data[train.indices, ]
test.set <- data[-train.indices, ]
# Model from (b) on training set
model.b <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
floors +
view +
condition +
grade +
yr_built,
data = train.set)
# Model from (c) on training set
model.c <- lm(log.price ~ bedrooms +
bathrooms +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2,
data = train.set)
# Predictions
pred.b <- predict(model.b, newdata = test.set)
pred.c <- predict(model.c, newdata = test.set)
# MSE
mse.b <- mean((pred.b - test.set$log.price)^2)
mse.c <- mean((pred.c - test.set$log.price)^2)
paste("MSE model (b):", mse.b)
paste("MSE model (c):", mse.c)
# New model with an interaction term
# between grade and sqft_living
# & polynomial for bathroom
model.extended <- lm(log.price ~ bedrooms +
bathrooms +
I(bathrooms^2) +
sqft_living +
sqft_living2 +
floors +
view +
condition +
grade +
yr_built +
yr_built2 +
grade:sqft_living,
data = train.set)
pred.extended <- predict(model.extended, newdata = test.set)
mse.extended <- mean((pred.extended - test.set$log.price)^2)
paste("MSE extended model:", mse.extended)
