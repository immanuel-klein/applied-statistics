ggplot(pc.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Using Covariance Matrix)",
x = "PC1",
y = "PC2") +
theme_minimal() +
scale_color_manual(values = c("red", "green", "blue")) +
theme(legend.position = "topright")
# Extract the first two principal components
pc.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pc.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Using Covariance Matrix)",
x = "PC1",
y = "PC2") +
theme_minimal() +
scale_color_manual(values = c("red", "green", "blue"))
# Extract the first two principal components
pc.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pc.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Using Covariance Matrix)",
x = "PC1",
y = "PC2")
# Extract the first two principal components
pc.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pc.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Cov. Matrix)",
x = "PC1",
y = "PC2")
pc.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Extract the first two principal components
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pca.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Cov. Matrix)",
x = "PC1",
y = "PC2")
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Retrieve the cluster assignments
clusters <- kmeans.result$cluster
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
#pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
# PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Retrieve the cluster assignments
clusters <- kmeans.result$cluster
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
# Extract the first two principal components
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pca.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Cov. Matrix)",
x = "PC1",
y = "PC2")
#pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
# PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Retrieve the cluster assignments
clusters <- kmeans.result$cluster
clusters
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Retrieve the cluster assignments
clusters <- kmeans.result$cluster
kmeans.result
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Retrieve the cluster assignments
clusters <- kmeans.result$cluster
confusion_matrix <- table(clusters, species_as_int)
print(confusion_matrix)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
table(kmeans.result$cluster, iris$Species)
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 3 # virginica
cluster_adjusted[clusters == 2] <- 1 # setosa
cluster_adjusted[clusters == 3] <- 2 # versicolor
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
table(kmeans.result$cluster, iris$Species)
table(species.as.int, iris$Species)
cluster.adjusted <- kmeans.result$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
# Relabel the clusters to match the species labels
# Here we manually adjust the cluster labels to match the species
# Based on visual inspection or a table, you can identify the corresponding labels
# For example, if kmeans_result$cluster == 1 corresponds mostly to "setosa", label it as 1
cluster_adjusted <- clusters
# Manual relabeling (this depends on the actual output, an example is given)
# If cluster 1 corresponds to virginica, cluster 2 to setosa, and cluster 3 to versicolor:
cluster_adjusted[clusters == 1] <- 2 # versicolor
cluster_adjusted[clusters == 2] <- 3 # virginica
cluster_adjusted[clusters == 3] <- 1 # setosa
# Calculate the classification error
classification_error <- mean(cluster_adjusted != species_as_int)
classification_error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
table(kmeans.result$cluster, iris$Species)
cluster.adjusted <- kmeans.result$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
# Calculate classification error
classification.error <- mean(cluster.adjusted != species.as.int)
classification.error
# Perform K-means clustering on the original dataset (all four variables)
set.seed(47)
kmeans_full <- kmeans(iris_reduced, centers = 3, nstart = 20)
# Adjust cluster labels similarly
clusters_full <- kmeans_full$cluster
# Manual relabeling as per the previous steps
# Assuming, for instance:
clusters_full_adjusted <- clusters_full
clusters_full_adjusted[clusters_full == 1] <- 3 # virginica
clusters_full_adjusted[clusters_full == 2] <- 1 # setosa
clusters_full_adjusted[clusters_full == 3] <- 2 # versicolor
# Calculate the classification error for the full dataset
classification_error_full <- mean(clusters_full_adjusted != species_as_int)
classification_error_full
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
table(kmeans.result$cluster, iris$Species)
cluster.adjusted <- kmeans.result$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
# Calculate classification error
classification.error <-
mean(cluster.adjusted != species.as.int)
classification.error
# Now with the original dataset
set.seed(47)
kmeans.full <- kmeans(iris.reduced, centers = 3, nstart = 20)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
table(kmeans.full$cluster, iris$Species)
cluster.adjusted <- kmeans.full$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
# Calculate classification error
classification.error.full <-
mean(clusters.full.adjusted != species.as.int)
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
table(kmeans.result$cluster, iris$Species)
cluster.adjusted <- kmeans.result$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
# Calculate classification error
classification.error <-
mean(cluster.adjusted != species.as.int)
classification.error
# Now with the original dataset
set.seed(47)
kmeans.full <- kmeans(iris.reduced, centers = 3, nstart = 20)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
table(kmeans.full$cluster, iris$Species)
cluster.adjusted.full <- kmeans.full$cluster
cluster.adjusted.full[clusters == 1] <- 2 # versicolor
cluster.adjusted.full[clusters == 2] <- 3 # virginica
cluster.adjusted.full[clusters == 3] <- 1 # setosa
# Calculate classification error
classification.error.full <-
mean(cluster.adjusted.full != species.as.int)
classification.error.full
library("tidyverse")
library("ggplot2")
data(iris)
iris.reduced <- iris[, -5]
# Extract loadings and scores, perform PCA with cov matrix
pca.result.cov <- prcomp(iris.reduced, scale. = FALSE)
# Show loadings and scores
pca.result.cov$rotation
head(pca.result.cov$x, 5)
# Calculate (cumulative) explained variance.
variance.explained <-
pca.result.cov$sdev^2 / sum(pca.result.cov$sdev^2)
cumulative.variance.explained <- sum(variance.explained[1:2])
paste('Cumulative Variance Explained by First Two PCs: ',
cumulative.variance.explained)
# Calculate the pcs with cor matrix
pca.result.cor <- prcomp(iris.reduced, scale. = TRUE)
# Show loadings and scores
pca.result.cor$rotation
head(pca.result.cor$x, 5)
# Calculate (cumulative) explained variance.
variance.explained <-
pca.result.cor$sdev^2 / sum(pca.result.cor$sdev^2)
cumulative.variance.explained <- sum(variance.explained[1:2])
paste('Variance Explained by First Two PCs: ',
cumulative.variance.explained)
# Create a new dataset with Petal.Length in millimeters
iris.mm.reduced <- iris.reduced
iris.mm.reduced$Petal.Length <- iris.mm.reduced$Petal.Length * 10
# Perform PCA with cov matrix
pca.result.mm.cov <- prcomp(iris.mm.reduced, scale. = FALSE)
# Loadings and variance explained
loadings.mm.cov <- pca.result.mm.cov$rotation
variance.explained.mm.cov <-
pca.result.mm.cov$sdev^2 / sum(pca.result.mm.cov$sdev^2)
cumulative.variance.explained.mm.cov <-
sum(variance.explained.mm.cov[1:2])
print('Covariance Matrix')
pca.result.mm.cov$rotation
paste('Variance Explained by First Two PCs: ',
cumulative.variance.explained.mm.cov)
# Perform PCA with cor matrix
pca.result.mm.cor <- prcomp(iris.mm.reduced, scale. = TRUE)
# Loadings and variance explained
loadings.mm.cor <- pca.result.mm.cor$rotation
variance.explained.mm.cor <-
pca.result.mm.cor$sdev^2 / sum(pca.result.mm.cor$sdev^2)
cumulative.variance.explained.mm.cor <-
sum(variance.explained.mm.cor[1:2])
print('Correlation Matrix')
pca.result.mm.cor$rotation
paste('Variance Explained by First Two PCs: ',
cumulative.variance.explained.mm.cor)
# Extract the first two principal components
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2],
Species = iris$Species)
ggplot(pca.data, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3) +
labs(title = "PCA of Iris Dataset (Cov. Matrix)",
x = "PC1",
y = "PC2")
pca.data <- data.frame(PC1 = pca.result.cov$x[,1],
PC2 = pca.result.cov$x[,2])
set.seed(47)
# Perform K-means clustering with K = 3
kmeans.result <- kmeans(pca.data, centers = 3, nstart = 20)
# Convert Species to integers
species.as.int <- as.integer(iris$Species)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
cluster.adjusted <- kmeans.result$cluster
cluster.adjusted[clusters == 1] <- 2 # versicolor
cluster.adjusted[clusters == 2] <- 3 # virginica
cluster.adjusted[clusters == 3] <- 1 # setosa
table(cluster.adjusted, iris$Species)
# Calculate classification error
classification.error <-
mean(cluster.adjusted != species.as.int)
classification.error
# Now with the original dataset
set.seed(47)
kmeans.full <- kmeans(iris.reduced, centers = 3, nstart = 20)
# See from tables which cluster belongs to which species and adjust
table(species.as.int, iris$Species)
cluster.adjusted.full <- kmeans.full$cluster
cluster.adjusted.full[clusters == 1] <- 2 # versicolor
cluster.adjusted.full[clusters == 2] <- 3 # virginica
cluster.adjusted.full[clusters == 3] <- 1 # setosa
table(cluster.adjusted.full, iris$Species)
# Calculate classification error
classification.error.full <-
mean(cluster.adjusted.full != species.as.int)
classification.error.full
